#+title: Loop continue
#+author: Gleefre
#+email: varedif.a.s@gmail.com

#+language: en
#+options: toc:nil

This is an extension to the CL:LOOP macro that provides =CONTINUE=,
=TAG= and =GO= keywords.

* Supported implementations
  SBCL, CMUCL, CCL, Allegro CL, CLASP, ABCL, ECL.
* Installation
  This library is available in [[https://ultralisp.org/][ultralisp]].
  Alternatively you can clone this repository to the =~/quicklisp/local-projects= directory.

  Load the system with ~ql:quickload~ or ~asdf:load-system~
  #+BEGIN_SRC common-lisp
  (ql:quickload :loop-continue)  ; or (asdf:load-system :loop-continue)
  #+END_SRC

  To enable the extension use the ~enable~ function:
  #+BEGIN_SRC common-lisp
  (loop-tag-go:enable)
  ; => T
  ;; Now you can use CONTINUE, TAG and GO in your loops!
  #+END_SRC

  You can also disable the extension with ~disable~:
  #+BEGIN_SRC common-lisp
  (loop-tag-go:disable)
  ; => NIL
  ;; Now CONTINUE, TAG and GO don't work again.
  #+END_SRC
* Description
  =CONTINUE= allows you to skip the current loop iteration (similar to
  ~continue~ in other languages).

  =TAG= and =GO= provide finer control similar to ~TAGBODY~.
* Examples
  =CONTINUE=:
  #+BEGIN_SRC common-lisp
  (loop #:for i #:from 1 #:to 6
        #:when (zerop (mod i 2))
          #:continue
        #:collect i)
  ; => (1 3 5)
  #+END_SRC

  For finer flow control you can use =TAG= and =GO=:
  #+BEGIN_SRC common-lisp
  (loop #:for i #:from 1 #:to 4
        #:when (zerop (mod i 2))
          #:go end
        #:collect i
        #:tag end
        #:do (format t "Logging: ~A~%" i))
  ; >> Logging: 1
  ; >> Logging: 2
  ; >> Logging: 3
  ; >> Logging: 4
  ; => (1 3)
  #+END_SRC
