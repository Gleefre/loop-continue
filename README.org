#+title: Loop TAG/GO keywords
#+author: Gleefre
#+email: varedif.a.s@gmail.com

#+language: en
#+options: toc:nil

This is a hack that enables TAG/GO/CONTINUE keywords in a LOOP macro.

* Supported implementations
  SBCL, CMUCL, CCL, Allegro CL, CLASP, ABCL, ECL.
* Installation
  Clone this repository to =~/quicklisp/local-projects= directory and
  load the system with ~ql:quickload~ or ~asdf:load-system~:
  #+BEGIN_SRC common-lisp
  (ql:quickload :loop-tag-go)  ; or (asdf:load-system :symbol-links)
  #+END_SRC

  To enable this hack use the ~enable!~ function:
  #+BEGIN_SRC common-lisp
  (loop-tag-go:enable!)
  ; => T
  ;; Now you can use TAG/GO in your loops!
  #+END_SRC

  You can also disable the hack with ~disable!~:
  #+BEGIN_SRC common-lisp
  (loop-tag-go:disable!)
  ; => NIL
  ;; Now TAG/GO don't work again.
  #+END_SRC
* Description
  ~TAG~ / ~GO~ keywords in a loop add control over the implicit
  ~TAGBODY~ of the ~LOOP~ macro.  You can create a tag with ~tag <go
  tag>~ (~tag~ cannot be used inside conditional clauses), and you can
  go to an exit marked by the ~tag~ with either the ~go <go-tag>~
  keyword or with an ordinary ~(go <go-tag>)~ form.

  You can also use the ~CONTINUE~ keyword to skip the current iteration.
  (It automatically inserts a tag ~:CONTINUE~ in the end of the loop).
* Examples
  #+BEGIN_SRC common-lisp
  (loop #:for i #:from 1 #:to 6
        #:when (zerop (mod i 2))
          #:continue
        #:collect i)
  ; => (1 3 5)
  #+END_SRC

  ~continue~ analogue but with a "protected" ~do~ clause:
  #+BEGIN_SRC common-lisp
  (loop #:for i #:from 1 #:to 4
        #:when (zerop (mod i 2))
          #:go end
        #:collect i
        #:tag end
        #:do (format t "Logging: ~A~%" i))
  ; >> Logging: 1
  ; >> Logging: 2
  ; >> Logging: 3
  ; >> Logging: 4
  ; => (1 3)
  #+END_SRC
